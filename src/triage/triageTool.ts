import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";
import { runTriage, validateTriageInput, TriageConfig } from './triageWorkflow.js';
import { SplunkLogEvent } from './types.js';

/**
 * Registers the triage Splunk error tool with the MCP server.
 * 
 * This tool automatically analyzes production errors from Splunk logs, identifies potential root causes
 * by cross-referencing with recent GitHub commits, and creates detailed Jira tickets.
 * 
 * @param server - The MCP server instance to register the tool with
 */
export function triageSplunkErrorTool(server: McpServer) {
  server.tool(
    "triage_splunk_error",
    "Automatically analyze production errors and create detailed Jira triage tickets with suspected root causes from GitHub commit analysis",
    {
      errorMessages: z.array(z.string()).describe("Array of error messages to analyze for triage"),
      repositoryName: z.string().optional().describe("GitHub repository name in format 'owner/repo' (e.g., 'company/service-repo')"),
      commitLookbackDays: z.number().min(1).max(30).optional().describe("Number of days to look back for commits (1-30, default: 7)"),
      createTickets: z.boolean().optional().describe("Whether to actually create Jira tickets (false for dry-run mode, default: true)")
    },
    async ({ errorMessages, repositoryName, commitLookbackDays, createTickets }) => {
      try {
        console.log(`\nüîç Starting automated error triage for ${errorMessages.length} error messages`);
        
        // Convert simple error messages to SplunkLogEvent format for internal processing
        const currentTime = new Date().toISOString();
        const logs: SplunkLogEvent[] = errorMessages.map((message, index) => ({
          _time: currentTime,
          message: message,
          source: 'triage-tool',
          serviceName: 'unknown-service',
          environment: 'unknown-environment',
          level: 'ERROR'
        }));
        
        // Set configuration with defaults
        const finalConfig: TriageConfig = {
          repositoryName: repositoryName || undefined,
          commitLookbackDays: commitLookbackDays || 7,
          createTickets: createTickets !== false
        };

        // Validate input
        validateTriageInput(logs, finalConfig);
        
        console.log('‚úÖ Input validation passed');
        console.log('üìä Triage configuration:', {
          errorCount: errorMessages.length,
          repositoryName: finalConfig.repositoryName || 'not specified',
          commitLookbackDays: finalConfig.commitLookbackDays,
          createTickets: finalConfig.createTickets,
          dryRun: !finalConfig.createTickets
        });
        
        // Run the triage workflow
        await runTriage(logs, finalConfig);
        
        return {
          content: [{
            type: "text",
            text: `‚úÖ Triage analysis completed successfully!\n\nProcessed ${errorMessages.length} error messages for automated analysis and Jira ticket creation. Check the console output above for detailed results including:\n\n‚Ä¢ Number of unique error signatures identified\n‚Ä¢ Jira tickets created for new errors\n‚Ä¢ Errors skipped (already processed)\n‚Ä¢ GitHub commits analyzed for potential root causes\n\nThe triage system helps reduce manual debugging effort by automatically:\n1. üîç Identifying and grouping similar errors\n2. üíª Analyzing recent commits for suspected causes\n3. üé´ Creating detailed Jira tickets with investigation starting points\n4. üìã Preventing duplicate tickets for known issues`
          }]
        };
        
      } catch (error) {
        console.error('‚ùå Triage analysis failed:', error);
        
        return {
          content: [{
            type: "text", 
            text: `‚ùå Error triage failed: ${error instanceof Error ? error.message : 'Unknown error'}\n\nThis could be due to:\n‚Ä¢ Empty or invalid error messages\n‚Ä¢ Configuration issues (invalid repository name format)\n‚Ä¢ Service connectivity problems (GitHub, Jira)\n‚Ä¢ Insufficient permissions for required operations\n\nPlease check the error details above and verify your configuration.`
          }]
        };
      }
    }
  );
}
