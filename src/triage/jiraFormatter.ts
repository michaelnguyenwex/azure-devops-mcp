import { TriageData, Commit } from './types.js';

/**
 * Formats triage data into a Jira ticket with summary and description.
 * Creates a detailed, markdown-formatted description for the Jira issue.
 * 
 * @param data - The triage data containing error information and analysis
 * @returns Object containing the ticket summary and description
 */
export function formatJiraTicket(data: TriageData): { summary: string; description: string } {
  const summary = generateTicketSummary(data);
  const description = generateTicketDescription(data);
  
  return { summary, description };
}

/**
 * Generates a concise but descriptive ticket summary/title.
 * 
 * @param data - The triage data
 * @returns Ticket summary string
 */
function generateTicketSummary(data: TriageData): string {
  // Extract the first meaningful part of the error for the summary
  const errorParts = data.errorSignature.split(' ').filter(part => part.length > 3);
  const mainErrorTerm = errorParts.slice(0, 5).join(' '); // Take first few meaningful words
  
  return `${data.serviceName} Error: ${mainErrorTerm} (${data.errorCount} occurrences)`;
}

/**
 * Generates a detailed markdown-formatted description for the Jira ticket.
 * 
 * @param data - The triage data
 * @returns Detailed ticket description
 */
function generateTicketDescription(data: TriageData): string {
  const sections: string[] = [];

  // Header section
  sections.push(
    "# 🚨 Production Error Detected - Automated Triage Report",
    "",
    "This ticket was automatically generated by the error triage system after detecting a production issue.",
    ""
  );

  // Error Summary section
  sections.push(
    "## 📊 Error Summary",
    "",
    `**Service:** ${data.serviceName}`,
    `**Environment:** ${data.environment}`,
    `**Error Count:** ${data.errorCount} occurrences`,
    `**First Seen:** ${data.firstSeen}`,
    `**Error Signature:** \`${data.errorSignature}\``,
    ""
  );

  // Splunk Investigation section
  sections.push(
    "## 🔍 Splunk Investigation",
    "",
    `[View Error Logs in Splunk](${data.splunkLink})`,
    "",
    "**Sample Error Message:**",
    "```",
    data.errorMessage,
    "```",
    ""
  );

  // Deployment Information section
  if (data.deploymentInfo) {
    sections.push(
      "## 🚀 Deployment Information",
      "",
      `**Deployed Commit:** \`${data.deploymentInfo.commitHash}\``,
      data.deploymentInfo.version ? `**Version:** ${data.deploymentInfo.version}` : "",
      data.deploymentInfo.deployedAt ? `**Deployed At:** ${data.deploymentInfo.deployedAt}` : "",
      ""
    );
  }

  // Suspected Commits section
  if (data.suspectedCommits && data.suspectedCommits.length > 0) {
    sections.push(
      "## 🕵️ Suspected Commits",
      "",
      "The following recent commits may be related to this error based on keyword analysis:",
      ""
    );

    data.suspectedCommits.forEach((commit, index) => {
      sections.push(
        `### ${index + 1}. ${commit.hash.substring(0, 8)} - ${commit.message.split('\n')[0]}`,
        "",
        `**Author:** ${commit.author}`,
        `**Date:** ${commit.date}`,
        commit.pullRequestUrl ? `**Pull Request:** [View PR](${commit.pullRequestUrl})` : "",
        "",
        "**Changed Files:**"
      );

      if (commit.changedFiles && commit.changedFiles.length > 0) {
        commit.changedFiles.forEach(file => {
          sections.push(`- \`${file}\``);
        });
      } else {
        sections.push("- No file information available");
      }
      
      sections.push("");
    });
  } else {
    sections.push(
      "## 🕵️ Suspected Commits",
      "",
      "No recent commits were identified as potentially related to this error.",
      "This could indicate:",
      "- The error may be related to infrastructure or external dependencies",
      "- The error signature may not match recent code changes",
      "- Additional investigation may be needed to identify the root cause",
      ""
    );
  }

  // Investigation Guidelines section
  sections.push(
    "## 🔧 Investigation Guidelines",
    "",
    "### Immediate Actions",
    "1. **Verify Impact**: Check if the error is still occurring in production",
    "2. **Review Logs**: Use the Splunk link above to examine recent occurrences",
    "3. **Check Monitoring**: Review application metrics for correlated issues",
    "",
    "### Root Cause Analysis",
    "1. **Code Review**: Examine the suspected commits for potential issues",
    "2. **Deployment Timeline**: Correlate error occurrences with recent deployments",
    "3. **Environment Changes**: Check for recent infrastructure or configuration changes",
    "4. **Dependencies**: Verify if external service dependencies are functioning correctly",
    "",
    "### Next Steps",
    "- [ ] Assign to appropriate team/developer",
    "- [ ] Reproduce the error in a test environment",
    "- [ ] Implement fix and test thoroughly",
    "- [ ] Deploy fix and monitor for resolution",
    ""
  );

  // Technical Details section
  sections.push(
    "## 🔬 Technical Details",
    "",
    "### Error Analysis Metadata",
    `- **Triage Run Time:** ${new Date().toISOString()}`,
    `- **Analysis Scope:** Recent commits since error first occurrence`,
    `- **Keyword Matching:** Automated analysis based on error message content`,
    "",
    "### Related Documentation",
    "- Service runbook: [Add link to service documentation]",
    "- Deployment process: [Add link to deployment guides]",
    "- Monitoring dashboards: [Add links to relevant dashboards]",
    ""
  );

  // Footer
  sections.push(
    "---",
    "",
    "*This ticket was automatically generated by the Error Triage System. For questions about the triage process, contact the DevOps team.*"
  );

  return sections.join('\n');
}

/**
 * Formats commit information for display in Jira tickets.
 * 
 * @param commits - Array of commits to format
 * @returns Formatted string representation of commits
 */
export function formatCommitsForDisplay(commits: Commit[]): string {
  if (!commits || commits.length === 0) {
    return "No commits available";
  }

  return commits.map(commit => {
    const shortHash = commit.hash.substring(0, 8);
    const firstLine = commit.message.split('\n')[0];
    const fileCount = commit.changedFiles ? commit.changedFiles.length : 0;
    
    return `- ${shortHash}: ${firstLine} (${commit.author}, ${fileCount} files)`;
  }).join('\n');
}

/**
 * Creates a concise error summary for notifications or alerts.
 * 
 * @param data - The triage data
 * @returns Brief error summary
 */
export function createErrorSummary(data: TriageData): string {
  return `Error in ${data.serviceName} (${data.environment}): ${data.errorCount} occurrences of "${data.errorSignature.substring(0, 100)}..." First seen: ${data.firstSeen}`;
}
